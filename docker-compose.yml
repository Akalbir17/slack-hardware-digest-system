networks:
  slack_digest_network:
    driver: bridge

services:
  redis:
    image: redis:7-alpine
    container_name: slack_digest_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - slack_digest_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

  postgres:
    image: postgres:15-alpine
    container_name: slack_digest_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - slack_digest_network
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-slack_digest}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-slack_digest}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  fastapi:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: slack_digest_fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/slack_digest}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Volume mounts for hot reloading
      - ./app:/app/app
      - ./agents:/app/agents
      - ./scripts:/app/scripts
    restart: unless-stopped
    networks:
      - slack_digest_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  streamlit:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: slack_digest_streamlit
    ports:
      - "8501:8501"
    env_file:
      - .env
    environment:
      - API_URL=http://fastapi:8000
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/slack_digest}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      fastapi:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Volume mounts for hot reloading
      - ./dashboard:/app/dashboard
      - ./agents:/app/agents
      - ./scripts:/app/scripts
    restart: unless-stopped
    networks:
      - slack_digest_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data: 